@model List<CapstoneProject.Models.ClassLibrary.Project>
@{
    ViewData["Title"] = "Manage Projects";
    Layout = "_ReviewerLayout";
}

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="~/css/GridView.css" asp-append-version="true" />
    <style>
        table th {
            white-space: nowrap;
        }

            table th.sortable {
                cursor: pointer;
                text-decoration: underline;
            }

                /* Hover effect specifically for sortable headers */
                table th.sortable:hover {
                    color: #A50034;
                    background-color: #f0f0f0;
                    text-decoration: underline;
                }

        /* Sort icon styling */
        .sort-icon {
            display: inline-block; /* Isolates the icon from inheriting text underline */
            margin-left: 5px;
            font-size: 0.9em;
            color: inherit; /* Matches the text color by default */
            text-decoration: none;
        }

        .sort-asc::after {
            content: "▲"; /* Up arrow */
            text-decoration: none;
        }

        .sort-desc::after {
            content: "▼"; /* Down arrow */
            text-decoration: none;
        }

        .btn-success {
            background-color: #198754;
            border: none;
        }
        /* Ensure the icon matches text color on hover */
        table th.sortable:hover .sort-icon {
            color: #A50034;
            text-decoration: none;
        }

        .filter-form {
            border-radius: 8px;
            background-color: #f7f7f7;
            border: 1px solid #e0e0e0;
            padding: 16px;
        }

        .filter-label {
            font-weight: 500;
            color: #333;
            font-size: 14px;
        }

        .filter-input {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid #d0d0d0;
            border-radius: 6px;
            font-size: 14px;
            margin-top: 4px;
        }

            .filter-input:focus {
                outline: none;
                border-color: #a50034;
                box-shadow: 0 0 5px rgba(165, 0, 52, 0.3);
            }

        .custom-date-inputs {
            display: flex;
            gap: 8px;
        }

        .date-input {
            flex: 1;
        }

        .filter-button {
            padding: 8px 20px;
            border-radius: 6px;
            border: none;
            cursor: pointer;
            font-weight: bold;
            font-size: 14px;
            transition: background-color 0.2s;
        }

        .apply-button {
            background-color: #a50034;
            color: #fff;
        }

            .apply-button:hover {
                background-color: #850029;
            }

        .reset-button {
            background-color: #ccc;
            color: #333;
            margin-left: 8px;
        }

            .reset-button:hover {
                background-color: #bbb;
            }
    </style>
</head>

<div class="container mt-5">
    <h3 class="text-center mb-4">Admin Manage Projects</h3>
    <form asp-action="ManageProjects" method="get" class="filter-form row mb-4 p-3 shadow-sm">
        <div class="col-4">
            <label for="searchText" class="form-label filter-label">Search Projects</label>
            <input type="text" name="searchText" id="searchText" class="filter-input" placeholder="Search by Project Name..."
                   value="@Context.Request.Query["searchText"]">
        </div>

        <div class="col-3">
            <label for="statusFilter" class="form-label filter-label">Status</label>
            <select name="statusFilter" id="statusFilter" class="filter-input">
                <option value="" class="btn btn-light">Filter by Status</option>
                <option value="Pending" class="btn btn-warning" selected="@(Context.Request.Query["statusFilter"] == "Pending" ? "selected" : null)">Pending</option>
                <option value="Approved" class="btn btn-success" selected="@(Context.Request.Query["statusFilter"] == "Approved" ? "selected" : null)">Approved</option>
                <option value="Rejected" class="btn btn-danger" selected="@(Context.Request.Query["statusFilter"] == "Rejected" ? "selected" : null)">Rejected</option>
            </select>
        </div>

        <div class="col-5">
            <label for="dateRangeFilter" class="form-label filter-label">Date Range</label>
            <select id="dateRangeFilter" name="dateRangeFilter" class="filter-input">
                <option value="">All Dates</option>
                <option value="today" selected="@(Context.Request.Query["dateRangeFilter"] == "today" ? "selected" : null)">Today</option>
                <option value="week" selected="@(Context.Request.Query["dateRangeFilter"] == "week" ? "selected" : null)">This Week</option>
                <option value="month" selected="@(Context.Request.Query["dateRangeFilter"] == "month" ? "selected" : null)">This Month</option>
                <option value="custom" selected="@(Context.Request.Query["dateRangeFilter"] == "custom" ? "selected" : null)">Custom Range</option>
            </select>

            @* Custom date inputs for start and end date *@
            <div class="custom-date-inputs mt-2">
                <input type="date" name="dateStart" class="filter-input date-input" placeholder="Start Date" value="@Context.Request.Query["dateStart"]">
                <input type="date" name="dateEnd" class="filter-input date-input mt-2" placeholder="End Date" value="@Context.Request.Query["dateEnd"]">
            </div>
        </div>

        <div class="col-12 d-flex justify-content-end mt-3">
            <button type="submit" class="filter-button apply-button">Apply Filters</button>
            <a href="@Url.Action("ManageProjects")" class="filter-button reset-button">Reset</a>
        </div>
    </form>

    <div class="row">
        <div class="table-responsive">
            <table id="projectsTable" class="table table-striped table-hover shadow-sm">
                <thead>
                    <tr>
                        <th class="sortable" onclick="sortProjectsTable(0)">Name <span class="sort-icon sort-asc" id="sort-icon-projects-0"></span></th>
                        <th>Short Description</th>
                        <th class="sortable" onclick="sortProjectsTable(2)">Project Status <span class="sort-icon" id="sort-icon-projects-2"></th>
                        <th class="sortable" onclick="sortProjectsTable(3)">Date Submitted <span class="sort-icon" id="sort-icon-projects-3"></span></th>
                        <th>View Project</th>
                    </tr>
                </thead>
                <tbody>
                    @* Iterate Database data into table rows *@
                    @* Check if there are any projects to display *@
                    @if (ViewBag.AdminViewProjects == null || ViewBag.AdminViewProjects.Count == 0)
                    {
                        <tr>
                            <td colspan="5" class="text-center">There are no projects</td>
                        </tr>
                    }
                    @foreach (var project in ViewBag.AdminViewProjects)
                    {
                        <tr>
                            <td data-value="@project.ProjectName">@project.ProjectName</td>
                            <td data-value="@project.ShortDesc">@project.ShortDesc</td>
                            <td data-value="@project.ProjectStatus">
                                @* Conditionally set Bootstrap button styles based on project status *@
                                @{
                                    string statusClass = project.ProjectStatus switch
                                    {
                                        "Approved" => "btn btn-success",
                                        "Rejected" => "btn btn-danger",
                                        "Pending" => "btn btn-warning"
                                    };
                                }
                                <span class="@statusClass">@project.ProjectStatus</span>
                            </td>
                            <td data-value="@project.DateSubmitted.ToString()">@project.DateSubmitted.ToString()</td>
                            <td><a class="btn btn-primary" asp-area="" asp-controller="AdminProject" asp-action="ViewAProject" asp-route-ProjectID="@project.ProjectID">View Details</a></td>

                        </tr>
                    }

                </tbody>
            </table>
        </div>
    </div>

</div>

<script>
    let projectsSortOrder = {};

    function sortProjectsTable(columnIndex) {
        const table = document.getElementById("projectsTable");
        const rows = Array.from(table.rows).slice(1);

        const direction = projectsSortOrder[columnIndex] === "asc" ? "desc" : "asc";
        projectsSortOrder[columnIndex] = direction;

        document.querySelectorAll("#projectsTable .sort-icon").forEach(icon => {
            icon.classList.remove("sort-asc", "sort-desc");
        });

        const currentIcon = document.getElementById(`sort-icon-projects-${columnIndex}`);
        if (currentIcon) {
            currentIcon.classList.add(direction === "asc" ? "sort-asc" : "sort-desc");
        }

        rows.sort((a, b) => {
            const aValue = a.cells[columnIndex].getAttribute("data-value").toLowerCase();
            const bValue = b.cells[columnIndex].getAttribute("data-value").toLowerCase();
            return direction === "asc" ? (aValue > bValue ? 1 : -1) : (aValue < bValue ? 1 : -1);
        });

        const tbody = table.querySelector("tbody");
        tbody.innerHTML = "";
        rows.forEach(row => tbody.appendChild(row));



    }
    // Sort the projects and profiles tables by the first column on page load
    window.onload = function () {
        sortProjectsTable(0); // Sort projects table by the first column (Name) in ascending order
    };
</script>